# """
# Django settings for myproject project.

# Generated by 'django-admin startproject' using Django 2.2.4.

# For more information on this file, see
# https://docs.djangoproject.com/en/2.2/topics/settings/

# For the full list of settings and their values, see
# https://docs.djangoproject.com/en/2.2/ref/settings/
# """

# import os

# # Build paths inside the project like this: os.path.join(BASE_DIR, ...)
# BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# # Quick-start development settings - unsuitable for production
# # See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# # SECURITY WARNING: keep the secret key used in production secret!
# SECRET_KEY = 'u+acmc%%_vtsdlecltxttagkxp%1fpla+yi6rt2v+p+94w_$o5'

# # SECURITY WARNING: don't run with debug turned on in production!
# DEBUG = True

# ALLOWED_HOSTS = ['*',]


# # Application definition

# INSTALLED_APPS = [
#     "admin_interface",
#     "colorfield",
#     'django.contrib.admin',
#     'django.contrib.auth',
#     'django.contrib.contenttypes',
#     'django.contrib.sessions',
#     'django.contrib.messages',
#     'django.contrib.staticfiles',
#     'home',          # 首页
#     'articles',      # 文章
#     'links',         # 友链
#     'message',      # 留言板
#     'diary',         # 生活日记
#     'about',         # 关于
#     'search',        #搜索
# ]

# MIDDLEWARE = [
#     'django.middleware.security.SecurityMiddleware',
#     'django.contrib.sessions.middleware.SessionMiddleware',
#     'django.middleware.common.CommonMiddleware',
#     'django.middleware.csrf.CsrfViewMiddleware',
#     'django.contrib.auth.middleware.AuthenticationMiddleware',
#     'django.contrib.messages.middleware.MessageMiddleware',
#     'django.middleware.clickjacking.XFrameOptionsMiddleware',
# ]

# ROOT_URLCONF = 'myproject.urls'

# TEMPLATES = [
#     {
#         'BACKEND': 'django.template.backends.django.DjangoTemplates',
#         'DIRS': [
#             os.path.join(BASE_DIR, 'templates')
#         ],
#         'APP_DIRS': True,
#         'OPTIONS': {
#             'context_processors': [
#                 'django.template.context_processors.debug',
#                 'django.template.context_processors.request',
#                 'django.contrib.auth.context_processors.auth',
#                 'django.contrib.messages.context_processors.messages',
#             ],
#         },
#     },
# ]

# WSGI_APPLICATION = 'myproject.wsgi.application'


# # Database
# # https://docs.djangoproject.com/en/2.2/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
#     }
# }


# # Password validation
# # https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

# AUTH_PASSWORD_VALIDATORS = [
#     {
#         'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
#     },
#     {
#         'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
#     },
#     {
#         'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
#     },
#     {
#         'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
#     },
# ]


# # Internationalization
# # https://docs.djangoproject.com/en/2.2/topics/i18n/

# LANGUAGE_CODE = 'zh-hans'

# TIME_ZONE = 'Asia/Shanghai'

# USE_I18N = True

# USE_L10N = True

# USE_TZ = False


# # Static files (CSS, JavaScript, Images)
# # https://docs.djangoproject.com/en/2.2/howto/static-files/

# STATIC_URL = '/static/'
# STATICFILES_DIRS = [
#     os.path.join(BASE_DIR, 'static'),
# ]

# X_FRAME_OPTIONS = "SAMEORIGIN"  # 允许使用 iframe
# SILENCED_SYSTEM_CHECKS = ["security.W019"]  # 禁用帧检查警告


"""
Django settings for myproject project.
Optimized for Django 3.2.18 and admin_interface
"""

import os
from django.utils import timezone
from datetime import datetime

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'u+acmc%%_vtsdlecltxttagkxp%1fpla+yi6rt2v+p+94w_$o5'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    # django-admin-interface 必须放在 admin 之前
    "admin_interface",
    "colorfield",
    
    # Django 核心应用
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    
    # 自定义应用
    'home',          # 首页
    'articles',      # 文章
    'links',         # 友链
    'message',       # 留言板
    'diary',         # 生活日记
    'about',         # 关于
    'search',        # 搜索
    'core'           #上下文处理
]

# django-admin-interface 主题配置
X_FRAME_OPTIONS = "SAMEORIGIN"
SILENCED_SYSTEM_CHECKS = ["security.W019"]  # 禁用帧检查警告

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'myproject.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR, 'templates'),
            # 添加 admin_interface 模板路径
            os.path.join(BASE_DIR, 'templates/admin'),
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'core.context_processors.backend_stats',
                
                # admin_interface 所需
                'django.template.context_processors.i18n',
                'django.template.context_processors.media',
                'django.template.context_processors.static',
                'django.template.context_processors.tz',
            ],
        },
    },
]

WSGI_APPLICATION = 'myproject.wsgi.application'


# Database
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


# Password validation
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = False

# 日期时间格式
DATETIME_FORMAT = 'Y-m-d H:i:s'
DATE_FORMAT = 'Y-m-d'


# Static files (CSS, JavaScript, Images)
STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')  # 生产环境收集静态文件
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
]

# 媒体文件配置
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# 邮件配置（示例）
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.example.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = 'no-reply@example.com'
EMAIL_HOST_PASSWORD = 'password'


# 缓存配置
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'unique-snowflake',
    }
}


# 日志配置
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
        'file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'logs/django.log'),
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'WARNING',
    },
    'loggers': {
        'django': {
            'handlers': ['file'],
            'level': 'INFO',
            'propagate': True,
        },
    },
}
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# =============================================================
# 后台管理系统定制配置 - django-admin-interface
# =============================================================

# 后台界面配置
ADMIN_SITE_HEADER = "博客管理系统"
ADMIN_SITE_TITLE = "博客管理后台"
ADMIN_INDEX_TITLE = "系统控制台"
ADMIN_SITE_URL = '/admin/'

# 自定义菜单结构（非分组形式）
ADMIN_MENU_STRUCTURE = [
    {
        "title": "仪表盘",
        "icon": "fas fa-tachometer-alt",
        "url": "/admin/",
    },
    {
        "title": "主题管理",
        "icon": "fas fa-palette",
        "models": [
            {"model": "admin_interface.Theme", "name": "主题设置"},
        ]
    },
    {
        "title": "用户管理",
        "icon": "fas fa-users",
        "models": [
            {"model": "auth.User", "name": "所有用户"},
            {"model": "auth.Group", "name": "角色组"},
        ]
    },
    {
        "title": "内容管理",
        "icon": "fas fa-newspaper",
        "models": [
            {"model": "articles.Article", "name": "文章内容"},
            {"model": "diary.Diary", "name": "生活日记"},
        ]
    },
    {
        "title": "系统管理",
        "icon": "fas fa-cog",
        "models": [
            {"model": "sites.Site", "name": "站点配置"},
            {"model": "links.Link", "name": "友情链接"},
        ]
    },
]

# 自定义主题配置
ADMIN_INTERFACE_THEME = {
    "name": "博客管理系统主题",
    "title": "博客管理系统",
    
    # 颜色方案（深蓝色调）
    "css_header_background_color": "#1a4f77",  # 深蓝色顶部栏
    "css_header_text_color": "#ffffff",        # 白色文字
    "css_module_background_color": "#2c6dbd",   # 蓝色模块头
    "css_module_text_color": "#ffffff",        # 白色文字
    "css_body_background_color": "#f8f9fa",     # 浅灰内容背景
    "css_sidebar_background_color": "#1a4f77",  # 深蓝侧边栏
    "css_sidebar_text_color": "#e0e0e0",       # 浅灰文字
    "css_sidebar_link_color": "#e0e0e0",        # 浅灰链接
    "css_sidebar_link_hover_color": "#ffffff",  # 白色悬停
    
    # 登录页定制
    "login_logo": "img/admin-logo.png",        # 后台LOGO
    "login_background": "img/login-bg.jpg",   # 登录页背景
    "login_box_color": "#ffffff",              # 登录框白色背景
    "login_button_color": "#2c6dbd",           # 登录按钮蓝色
    
    # 布局选项
    "sidebar_width": "280px",                  # 加宽侧边栏
    "sidebar_menu_style": "accordion",         # 折叠菜单
    "recent_actions_visible": True,           # 显示最近动作
    "list_filter_dropdown": True,              # 下拉筛选器
    "recent_actions_limit": 10,                # 最近动作数量
    
    # 功能增强
    "list_filter_highlight": True,             # 高亮筛选器
    "related_modal_active": True,              # 启用模态框
    "related_modal_background_color": "rgba(44, 109, 189, 0.7)", 
    "related_modal_rounded_corners": True,
}

# 重写默认的菜单生成
def get_admin_menu_with_custom_structure(app_list, request):
    # 使用我们定义的自定义菜单结构
    return ADMIN_MENU_STRUCTURE

# 应用自定义菜单
from django.contrib import admin
admin.AdminSite.get_menu = get_admin_menu_with_custom_structure


# =============================================================
# 生产环境优化（当DEBUG为False时启用）
# =============================================================
if not DEBUG:
    # 安全相关设置
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
    SECURE_SSL_REDIRECT = True
    SECURE_HSTS_SECONDS = 31536000  # 1 year
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
    
    # 静态文件由Nginx直接服务
    STATICFILES_STORAGE = 'django.contrib.staticfiles.storage.ManifestStaticFilesStorage'
    
    # 日志配置优化
    LOGGING['handlers']['file']['class'] = 'logging.handlers.RotatingFileHandler'
    LOGGING['handlers']['file']['maxBytes'] = 1024 * 1024 * 5  # 5 MB
    LOGGING['handlers']['file']['backupCount'] = 5
    
    # 缓存配置（使用Redis）
    CACHES = {
        'default': {
            'BACKEND': 'django_redis.cache.RedisCache',
            'LOCATION': 'redis://127.0.0.1:6379/1',
            'OPTIONS': {
                'CLIENT_CLASS': 'django_redis.client.DefaultClient',
            }
        }
    }
    
    # 禁用管理员界面中的 DEBUG 功能
    ADMIN_INTERFACE_THEME["env"] = "production"


# 项目启动时打印配置信息
if __name__ != "__main__":
    startup_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
    # 获取 Django 版本
    try:
        import django
        django_version = django.__version__
    except:
        django_version = "3.2.18"
    
    # 安全获取主题名称
    try:
        theme_name = ADMIN_INTERFACE_THEME.get('name', '默认主题')
    except:
        theme_name = '未知主题'
    
    print(f"\n{'='*60}")
    print(f"  🚀 博客管理系统已启动 (Django {django_version})")
    print(f"  ⏰ 启动时间: {startup_time}")
    print(f"  🌐 后台地址: http://localhost:8000/admin/")
    print(f"  🎨 当前主题: {theme_name}")
    print(f"  🚀 博主主站地址为: www.chencuo.top")
    print(f"{'='*60}\n")